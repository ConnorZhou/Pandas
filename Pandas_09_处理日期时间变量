import pandas as pd
pd.options.display.max_rows=10#设定自由列表输出最多为10行
print(pd.__version__)#显示当前Pandas版本号

def m_readdata(filename,startline=2):
    return pd.read_csv(filename,header=startline,usecols=[0,2,3,4,5,6,7,9,10])
bj08 = m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2008_HourlyPM2.5_created20140325.csv")
bj09 = m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2009_HourlyPM25_created20140709.csv")
bj10 = m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2010_HourlyPM25_created20140709.csv")
bj11 = m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2011_HourlyPM25_created20140709.csv")
bj12 = m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2012_HourlyPM2.5_created20140325.csv")
bj13 = m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2013_HourlyPM2.5_created20140325.csv")
bj14 = m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2014_HourlyPM25_created20150203.csv")
bj15 = m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2015_HourlyPM25_created20160201.csv",3)
bj16 = m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2016_HourlyPM25_created20170201.csv",3)

bj=bj08.append([bj09,bj10,bj11,bj12,bj13,bj14,bj15,bj16])

9 处理日期时间变量
9.1 建立Timestamp类和Period类
9.1.1 Timestamp对象

from datetime import datetime   # 从datetime包中引入datetime
datetime(2012,5,1)

pd.Timestamp(datetime(2012,5,1))
# 把datetime(2012,5,1)转换成Timestamp

pd.Timestamp(datetime(2012,5,1,1,2,3))

pd.Timestamp('2012-05-01 1:2:3')
#将字符串2012-05-01 1:2:3转换成Timestamp

pd.Timestamp(2012,5,1)

9.1.2 Period对象

pd.Period('2011-01')

pd.Period('2012-05',freq='D')
# 指定频率为Day

9.2 将数据转换为Timestamp类
9.2.1 使用pd.Timestamp()直接转换

pd.Timestamp(bj08['Date (LST)'][0])

bj08['Date (LST)'].apply(pd.Timestamp)

9.2.2 用to_datetime进行批量转换

pd.to_datetime(datetime(2012,5,1,1,2,3))

pd.to_datetime('2012-05-01 1:2:3')

pd.to_datetime(['2005/11/23','2010.12.31'])

pd.to_datetime(bj08['Date (LST)'],format="%Y-%m-%d %H:%M")

9.2.3 基于所需的变量列合成Timestamp类

pd.to_datetime(bj08[['Year','Month','Day','Hour']])

9.3 使用DatetimeIndex类
9.3.1 建立DatetimeIndex对象
9.3.1.1 建立索引时自动转换

使用Timestamp对象建立索引，将会自动转换为DatetimeIndex对象

bj08idx=bj08.set_index(pd.to_datetime(bj08['Date (LST)']))
#将bj08['Date (LST)转换成datetime类型再建设置成索引
print(type(bj08idx.index))
bj08idx

9.3.1.2 使用date_range建立DatetimeIndex对象

这种建立方式主要是和reindex命令配合使用，以快速完成对时间序列中缺失值的填充工作

pd.date_range('1/1/2012',periods=5,freq='M')

9.3.2 基于索引的快速切片操作

bj08idx["2008-11-1":"2008-11-5"]

bj08idx["2008-11"]

bj08idx["2008-11-1":"2008-11-5 9:00:00"]

9.4 对时间序列做基本处理
9.4.1 序列的分组汇总
9.4.1.1 直接取出索引的相应层级

bj08idx.index.hour

9.4.1.2 直接使用groupby方法进行汇总

bj08idx.groupby(bj08idx.index.month).max()

9.4.1.3 使用功能更强的resample函数

bj08idx.resample('3D').mean()
#按照三天为一个单位进行抽样或者说是进行重新分组

9.4.2 序列的缺失值处理

时间序列要求记录的时间点连挂无缺失

bj09idx=bj09.set_index(pd.to_datetime(bj09['Date (LST)']))
bj09idx=bj09idx[bj09idx.Value>0]
bj09idx

idx=pd.date_range(start='2009-02-01 00:00:00',
                 end='2009-12-31 22:00:00',freq='H')
idx

bj09idx.reindex(idx)
#原数据框中index有重复值，因此报错

bj09idx[bj09idx.index.duplicated()]

bj09idx['2009-3-8']

bj09idx[~bj09idx.index.duplicated()].reindex(idx)

bj09idx[~bj09idx.index.duplicated()].reindex(idx,method='bfill')

9.4.3 序列数值平移

bj08idx.shift(3)


