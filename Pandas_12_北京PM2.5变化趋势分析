import pandas as pd
pd.options.display.max_rows=10#设定自由列表输出最多为10行
print(pd.__version__)#显示当前Pandas版本号

def m_readdata(filename,startline=2):
    return pd.read_csv(filename,header=startline,usecols=[0,2,3,4,5,6,7,9,10])
bj08=m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2008_HourlyPM2.5_created20140325.csv")
bj09=m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2009_HourlyPM25_created20140709.csv")
bj10=m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2010_HourlyPM25_created20140709.csv")
bj11=m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2011_HourlyPM25_created20140709.csv")
bj12=m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2012_HourlyPM2.5_created20140325.csv")
bj13=m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2013_HourlyPM2.5_created20140325.csv")
bj14=m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2014_HourlyPM25_created20150203.csv")
bj15=m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2015_HourlyPM25_created20160201.csv",3)
bj16=m_readdata("D:\Python\pandas\PythonData\PM25\Beijing_2016_HourlyPM25_created20170201.csv",3)
bj=bj08.append([bj09,bj10,bj11,bj12,bj13,bj14,bj15,bj16])
bj

#读入原始数据并建立索引
bj=bj.iloc[:,[1,6]]
bj.columns=['datelst','value']
bj.set_index(pd.to_datetime(bj.datelst),inplace=True)
bj

#缺失值处理
bj=bj[bj.value>0]
bj

#取每日最大值作为当日PM代表
bjana=bj.groupby(bj.index.date).agg(max)
type(bjana.index)

#将索引重建为DatetimeIndex格式
bjana.index=pd.to_datetime(bjana.index)
type(bjana.index)

#PM数值的整体分布
bjana.value.plot.hist(bins=20)

#检查逐月数据缺失情况
pd.crosstab(index=bjana.index.year,columns=bjana.index.month)

bjana.groupby(bjana.index.year).median().plot()

bjana.groupby(bjana.index.month).median().plot()

bjana.groupby(bjana.index.weekday).median().plot()

bj.groupby(bj.index.hour).median().plot()

#对年份和月份数值做调整
bjana['month2']=bjana.index.month
bjana.month2.replace([1,2],[13,14],inplace=True)
bjana['year2']=bjana.index.year
bjana.loc[bjana.month2>12,'year2']-=1
bjana['2010']

bjana[bjana.month2>10].groupby(bjana.year2).value.median().plot()

bjana[bjana.month2>10].groupby(bjana.year2).value.max().plot()

bjana[bjana.value>500].groupby(bjana.year2).value.count().plot.bar()

bjana.query("value>500 and month2>10").groupby(bjana.year2).value.count().plot.bar()

bjana.query("value>500 and month2>=10").groupby(bjana.year2).value.count().plot.bar()


